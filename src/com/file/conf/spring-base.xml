<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- 配置扫描service层的注解 -->
	<context:component-scan 
		base-package="com.file.service.impl"></context:component-scan>
	
	<!-- 配置数据库连接参数的配置文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:com/file/conf/ssm-c3p0-mysql.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源  使用连接池管理数据源 C3P0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${c3p0.driverClass}"></property>
		<property name="jdbcUrl" value="${c3p0.jdbcUrl}"></property>
		<property name="user" value="${c3p0.user}"></property>
		<property name="password" value="${c3p0.password}"></property>
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<property name="maxStatements" value="${c3p0.maxStatements}"></property>
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"></property>
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property>
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"></property>
	</bean>

	<!-- 配置mybatis的SqlSession的生产工厂
		dataSource:注入数据源
		configLocation：加载mybatis的核心配置文件
		mapperLocations:加载mybatis的映射文件
	 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:com/file/conf/mybatis-config.xml"></property>
		<property name="mapperLocations" 
		value="classpath*:com/file/mapper/xml/*Mapper.xml"></property>
	</bean>

	<!-- 配置提高mybatis的扫描速度 
		MapperScannerConfigurer 可以将指定包下面的映射接口生成代理类（一个实现类）
		但是有要求：只扫描包下的指定接口，可以通过属性配置
		basePackage：指定要被扫描的目标包
		sqlSessionTemplateBeanName:告诉它在spring容器中找谁 注意：是字符串类型
		annotationClass:告诉它只扫描已经被注解了指定的注解的映射接口
				自定义一个注解类 定义一个接口并在interface前面添加一个@符号  即可
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.file.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
		<property name="annotationClass" value="com.file.annotation.DocAnnotation"></property>
	</bean>
	
	<!-- 配置mybatis的数据库操作的模板 -->
	<bean id="sqlSessionTemplate" 
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>

	<!-- 数据源的事务管理器 -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 事务通知 -->
	<tx:advice transaction-manager="transactionManager" id="txAdvice">
		<tx:attributes>
			<tx:method name="*"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置aop管理事务规则 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut 
		expression="execution(* com.file.*.impl.*.*(..))" 
		id="txPointcut"/>
		
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
</beans>
